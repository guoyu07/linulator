{"name":"Linulator","tagline":"The Linux Simulator","body":"### About\r\n\r\nThe goal of this project is to create a fake Linux environment with configurable network ports that\r\ncan be opened. Linulator can be used as a learning or training environment or even as a honeypot.\r\nWhile operating as a honeypot, it will hopefully attract potential attackers so that their methods\r\ncan be learned. The environment can be frozen and saved to disk for forensic analysis. Extensive\r\nlogging can also be employed.\r\n\r\n**Note:** This project is still very much a work in progress! There is no virtual filesystem in place yet,\r\nSSH is not implemented, and many commands still need to be added.\r\n\r\nSince the network services Linulator uses typically run on privileged ports and it is not recommended\r\nthat you run Linulator as root, you should run the services on ports >1024 and configure your firewall\r\nto forward or redirect the traffic to the higher-numbered ports. You may also want to run the program\r\nwithin a virtual machine, container, zone, jail, or chroot environment for added security on the host\r\nsystem.\r\n\r\n### Installation\r\n\r\n**Prerequisites:** [Apache Ant](http://ant.apache.org) and a [JDK](http://openjdk.java.net)\r\n\r\n1.) Build the jar:  \r\n```\r\n$ ant\r\n```\r\n\r\n2.) Change to the dist directory:  \r\n```\r\n$ cd dist\r\n```\r\n\r\n3.) Modify the configuration file to your liking:  \r\n```\r\n$ vi linulator.properties\r\n```\r\n\r\n4.) Optionally modify the security policy to meet your needs (the default should suffice):  \r\n```\r\n$ vi linulator.policy\r\n```\r\n\r\n5.) Forward or redirect any ports you want to use with Linulator. If you have a firewall/NAT appliance\r\nor broadband router, you can simply have Linulator listen on higher-numbered ports and forward the\r\nstandard port numbers. For example: outside:23 -> inside:10023 for telnet. If the host is reachable\r\nfrom the Internet and Linulator is listening on nonstandard unprivileged ports, you will want to\r\nredirect traffic from the standard ports. This can be done using iptables, ipfw, or similar. Replace\r\nthe addresses, interfaces, and ports in the examples below with your own.\r\n\r\n**FreeBSD**  \r\nModify */etc/rc.conf* and add the following line:  \r\n```\r\npf_enable=\"YES\"\r\n```\r\n\r\nAdd similar lines for each service to */etc/pf.conf*:  \r\n```\r\nrdr pass on em0 proto tcp from any to 192.168.1.7 port 10023 -> 192.168.1.7 port 23\r\n```\r\n\r\nStart the packet filter:  \r\n```\r\n# /etc/rc.d/pf start\r\n```\r\n\r\nConfirm the rules are in memory:  \r\n```\r\n# pfctl -sn\r\n```\r\n\r\n**Linux**  \r\nRun similar commands for each service (see the documentation for your distribution to make the rule persistent):  \r\n```\r\n# iptables -t nat -I PREROUTING --src 0/0 --dst 192.168.1.7 -p tcp --dport 23 -j REDIRECT --to-ports 10023\r\n```\r\n\r\nConfirm the rules are in memory:  \r\n```\r\n# iptables -L\r\n```\r\n\r\n**OS X <= 10.6 (Snow Leopard)**  \r\nRun similar commands for each service (and replace the rule numbers with your own):  \r\n```\r\n$ sudo ipfw add 101 fwd 192.168.1.7,10023 tcp from any to me 23\r\n```\r\n\r\nConfirm the rules are in memory:  \r\n```\r\n$ sudo ipfw list\r\n```\r\n\r\nTo make the rules persistent, you can add them to */etc/ipfw.conf* and create a launch agent or daemon\r\nto load them automatically (use a search engine for details.)\r\n\r\n**OS X 10.7 (Lion), 10.8 (Mountain Lion), and 10.9 (Mavericks)**  \r\nNote: *ipfw* was deprecated in 10.7 (Lion). Use *pf* instead.\r\n\r\nAdd similar lines for each service to */etc/pf.conf*:  \r\n```\r\nrdr on en0 inet proto tcp to 192.168.1.7 port 23 -> 192.168.1.7 port 10023\r\n```\r\n\r\nLoad the changes:  \r\n```\r\n$ sudo pfctl -f /etc/pf.conf\r\n```\r\n\r\nEnable the packet filter:  \r\n```\r\n$ sudo pfctl -e\r\n```\r\n\r\nConfirm the rules are in memory:  \r\n```\r\n$ sudo pfctl -sn\r\n```\r\n\r\n**Solaris**  \r\nAdd similar lines for each service to */etc/ipf/ipnat.conf*:  \r\n```\r\nrdr e1000g0 from any to 192.168.1.7 port = 23 -> 192.168.1.7 port 10023 tcp\r\n```\r\n\r\nEnable the IP filter:\r\n```\r\n# svcadm enable ipfilter\r\n```\r\n\r\nConfirm the rules are in memory:  \r\n```\r\n# ipnat -l\r\n```\r\n\r\n6.) Launch Linulator (where X.X.X is the version and YYYYMMDD is the build date):  \r\n```\r\n$ java -jar linulator-X.X.X-YYYYMMDD.jar\r\n```\r\n\r\n7.) Enjoy!\r\n\r\n### FAQ\r\n\r\n**Why create a fake Linux environment when you can have a real one?**\r\n\r\nThis project was mainly created for learning purposes. The aim was to also create something even\r\nmore disposable than a virtual machine with less setup time.\r\n\r\n**If used as a honeypot, how can an attacker gain access to the Linulator environment?**\r\n\r\nThe idea is to allow the attacker access via FTP and telnet (and later SSH) after they discover a\r\nuser/password combination with the password being intentionally weak. They can then navigate around\r\nthe artificial system while Linulator logs their moves to the host system. They may attempt to remove\r\nlog files, modify files, plant rootkits, and perform other malicious activities. All of this behavior\r\ncan be tracked and does not harm the host operating system.\r\n\r\n**Why Java?**\r\n\r\nC was originally intended to be used for this project, but Java has some benefits worth taking\r\nadvantage of. Java has a large API. As a result, there is unlikely a need to go in search of\r\nthird-party libraries or re-invent the wheel. Java is also more portable and eliminates the\r\nrequirement for things like #ifdef and cmake.\r\n\r\nAnother very important and particularly applicable aspect for Linulator is security. Java performs\r\nbounds checking on arrays which can significantly reduce the risk of buffer overflows (unless there\r\nis a vulnerability in the JVM of course.) The SecurityManager class is additionally essential since\r\nit limits what users can do within Linulator. Lastly, a consequence of automatic memory management\r\nis that there are no explicit pointers. This increases safety by preventing dangling/wild pointers\r\nand defends against memory leaks.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}